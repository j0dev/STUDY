{"ast":null,"code":"var _jsxFileName = \"/Users/j0dev/Desktop/j0dev/Study/react/my-app/src/App.js\";\nimport React, { useRef, useState } from 'react'; // import Hello from \"./Hello\";\n// import Wrapper from './Wrapper';\n\nimport UserList from './UserList';\nimport CreateUser from './CreateUser';\n\nfunction App() {\n  const [inputs, setInputs] = useState({\n    username: '',\n    email: ''\n  });\n  const {\n    username,\n    email\n  } = inputs;\n\n  const onChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setInputs({ ...inputs,\n      [name]: value\n    });\n  };\n\n  const [users, setUsers] = useState([{\n    id: 1,\n    username: \"j0dev\",\n    email: \"asdf@asdf.com\",\n    active: true\n  }, {\n    id: 2,\n    username: \"intadd\",\n    email: \"qwer@asdf.com\",\n    active: false\n  }, {\n    id: 3,\n    username: \"test\",\n    email: \"zxcv@asdf.com\",\n    active: false\n  }]);\n  const nextId = useRef(4); //특정 돔을 선택하고 싶을때 쓸 수 도 있지만, 어떠한 변수의 값을 계속 기억하고 싶을때 사용 -> 컴포넌트가 리렌더링 되도 유지됨\n  //또한 이값이 변경되더라도 컴포넌트가 리렌더링 되지 않음\n\n  const onCreate = () => {\n    const user = {\n      id: nextId.current,\n      username,\n      email\n    }; // setUsers(users.concat(user));\n\n    setUsers([...users, user]);\n    setInputs({\n      username: '',\n      email: ''\n    });\n    console.log(nextId.current);\n    nextId.current += 1;\n  };\n\n  const onRemove = id => {\n    setUsers(users.filter(user => user.id !== id));\n    console.log(target);\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(CreateUser, {\n    username: username,\n    email: email,\n    onChange: onChange,\n    onCreate: onCreate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }\n  }), React.createElement(UserList, {\n    users: users,\n    onRemove: onRemove,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/j0dev/Desktop/j0dev/Study/react/my-app/src/App.js"],"names":["React","useRef","useState","UserList","CreateUser","App","inputs","setInputs","username","email","onChange","e","name","value","target","users","setUsers","id","active","nextId","onCreate","user","current","console","log","onRemove","filter"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,MAAf,EAAuBC,QAAvB,QAAsC,OAAtC,C,CACA;AACA;;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,UAAP,MAAuB,cAAvB;;AAKA,SAASC,GAAT,GAAe;AAEb,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAC;AACnCM,IAAAA,QAAQ,EAAE,EADyB;AAEnCC,IAAAA,KAAK,EAAE;AAF4B,GAAD,CAApC;AAKA,QAAM;AAACD,IAAAA,QAAD;AAAWC,IAAAA;AAAX,MAAoBH,MAA1B;;AAGA,QAAMI,QAAQ,GAAIC,CAAD,IAAO;AACtB,UAAM;AAACC,MAAAA,IAAD;AAAOC,MAAAA;AAAP,QAAgBF,CAAC,CAACG,MAAxB;AACAP,IAAAA,SAAS,CAAC,EACR,GAAGD,MADK;AAER,OAACM,IAAD,GAAQC;AAFA,KAAD,CAAT;AAID,GAND;;AAQA,QAAM,CAACE,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,CAAE,CAClC;AACEe,IAAAA,EAAE,EAAE,CADN;AAEET,IAAAA,QAAQ,EAAE,OAFZ;AAGEC,IAAAA,KAAK,EAAE,eAHT;AAIES,IAAAA,MAAM,EAAE;AAJV,GADkC,EAOlC;AACED,IAAAA,EAAE,EAAE,CADN;AAEET,IAAAA,QAAQ,EAAE,QAFZ;AAGEC,IAAAA,KAAK,EAAE,eAHT;AAIES,IAAAA,MAAM,EAAE;AAJV,GAPkC,EAalC;AACED,IAAAA,EAAE,EAAE,CADN;AAEET,IAAAA,QAAQ,EAAE,MAFZ;AAGEC,IAAAA,KAAK,EAAE,eAHT;AAIES,IAAAA,MAAM,EAAE;AAJV,GAbkC,CAAF,CAAlC;AAsBA,QAAMC,MAAM,GAAGlB,MAAM,CAAC,CAAD,CAArB,CAxCa,CAyCb;AACA;;AAEA,QAAMmB,QAAQ,GAAG,MAAM;AAErB,UAAMC,IAAI,GAAG;AACXJ,MAAAA,EAAE,EAAEE,MAAM,CAACG,OADA;AAEXd,MAAAA,QAFW;AAGXC,MAAAA;AAHW,KAAb,CAFqB,CAQrB;;AACAO,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAWM,IAAX,CAAD,CAAR;AACAd,IAAAA,SAAS,CAAC;AACRC,MAAAA,QAAQ,EAAE,EADF;AAERC,MAAAA,KAAK,EAAC;AAFE,KAAD,CAAT;AAIAc,IAAAA,OAAO,CAACC,GAAR,CAAYL,MAAM,CAACG,OAAnB;AACAH,IAAAA,MAAM,CAACG,OAAP,IAAkB,CAAlB;AACD,GAhBD;;AAkBA,QAAMG,QAAQ,GAAIR,EAAD,IAAQ;AACvBD,IAAAA,QAAQ,CAACD,KAAK,CAACW,MAAN,CAAaL,IAAI,IAAIA,IAAI,CAACJ,EAAL,KAAYA,EAAjC,CAAD,CAAR;AAEAM,IAAAA,OAAO,CAACC,GAAR,CAAYV,MAAZ;AACD,GAJD;;AAMA,SAEE,0CACA,oBAAC,UAAD;AACE,IAAA,QAAQ,EAAEN,QADZ;AAEE,IAAA,KAAK,EAAEC,KAFT;AAGE,IAAA,QAAQ,EAAEC,QAHZ;AAIE,IAAA,QAAQ,EAAEU,QAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,EAOA,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAIL,KAAnB;AAA0B,IAAA,QAAQ,EAAEU,QAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPA,CAFF;AAYD;;AAED,eAAepB,GAAf","sourcesContent":["import React, {useRef, useState} from 'react';\n// import Hello from \"./Hello\";\n// import Wrapper from './Wrapper';\nimport UserList from './UserList';\nimport CreateUser from './CreateUser';\n\n\n\n\nfunction App() {\n\n  const [inputs, setInputs] = useState({\n    username: '',\n    email: '',\n  })\n\n  const {username, email} = inputs;\n\n\n  const onChange = (e) => {\n    const {name, value} = e.target;\n    setInputs({\n      ...inputs,\n      [name]: value\n    })\n  }\n\n  const [users, setUsers] = useState ([\n    {\n      id: 1,\n      username: \"j0dev\",\n      email: \"asdf@asdf.com\",\n      active: true\n    },\n    {\n      id: 2,\n      username: \"intadd\",\n      email: \"qwer@asdf.com\",\n      active: false\n    },\n    {\n      id: 3,\n      username: \"test\",\n      email: \"zxcv@asdf.com\",\n      active: false\n    }\n  ]);\n\n\n  const nextId = useRef(4)\n  //특정 돔을 선택하고 싶을때 쓸 수 도 있지만, 어떠한 변수의 값을 계속 기억하고 싶을때 사용 -> 컴포넌트가 리렌더링 되도 유지됨\n  //또한 이값이 변경되더라도 컴포넌트가 리렌더링 되지 않음\n\n  const onCreate = () => {\n\n    const user = {\n      id: nextId.current,\n      username,\n      email,\n    }\n\n    // setUsers(users.concat(user));\n    setUsers([...users, user]);\n    setInputs({\n      username: '',\n      email:''\n    })\n    console.log(nextId.current)\n    nextId.current += 1;\n  }\n\n  const onRemove = (id) => {\n    setUsers(users.filter(user => user.id !== id));\n    \n    console.log(target)\n  }\n\n  return (\n\n    <>\n    <CreateUser\n      username={username}\n      email={email}\n      onChange={onChange}\n      onCreate={onCreate}\n      />\n    <UserList users = {users} onRemove={onRemove}/>\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}