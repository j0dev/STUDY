{"ast":null,"code":"export const createPromiseThunk = (type, promiseCreator) => {\n  const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\n  return param => async dispatch => {\n    dispatch({\n      type\n    });\n\n    try {\n      const payload = await promiseCreator(param);\n      dispatch({\n        type: SUCCESS,\n        payload\n      });\n    } catch (e) {\n      dispatch({\n        type: ERROR,\n        payload: e,\n        error: true //fsa -> flux standard action\n\n      });\n    }\n  };\n};\n\nconst defaultIdSelector = param => param;\n\nexport const createPromiseThunkById = (type, promiseCreator, idSelector = defaultIdSelector) => {\n  const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\n  return param => async dispatch => {\n    const id = idSelector(param);\n    dispatch({\n      type,\n      meta: id\n    });\n\n    try {\n      const payload = await promiseCreator(param);\n      dispatch({\n        type: SUCCESS,\n        payload,\n        meta: id\n      });\n    } catch (e) {\n      dispatch({\n        type: ERROR,\n        payload: e,\n        error: true,\n        meta: id //fsa -> flux standard action\n\n      });\n    }\n  };\n};\nexport const handleAsyncActions = (type, key, keepData) => {\n  const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\n  return (state, action) => {\n    switch (action.type) {\n      case type:\n        return { ...state,\n          [key]: reducerUtils.loading(keepData ? state[key].data : null)\n        };\n\n      case SUCCESS:\n        return { ...state,\n          [key]: reducerUtils.success(action.payload)\n        };\n\n      case ERROR:\n        return { ...state,\n          [key]: reducerUtils.error(action.payload)\n        };\n\n      default:\n        return state;\n    }\n  };\n};\nexport const reducerUtils = {\n  initial: (data = null) => ({\n    data,\n    loading: false,\n    error: null\n  }),\n  loading: (prevState = null) => ({\n    data: prevState,\n    loading: true,\n    error: null\n  }),\n  success: data => ({\n    data,\n    loading: false,\n    error: null\n  }),\n  error: error => ({\n    data: null,\n    loading: false,\n    error\n  })\n};","map":{"version":3,"sources":["/Users/j0dev/Desktop/j0dev/Study/react/learn-redux-middleware/src/lib/asyncUtils.js"],"names":["createPromiseThunk","type","promiseCreator","SUCCESS","ERROR","param","dispatch","payload","e","error","defaultIdSelector","createPromiseThunkById","idSelector","id","meta","handleAsyncActions","key","keepData","state","action","reducerUtils","loading","data","success","initial","prevState"],"mappings":"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","sourcesContent":["export const createPromiseThunk = (type, promiseCreator) => {\n  const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\n\n  return (param) => async (dispatch) => {\n    dispatch({ type });\n    try {\n      const payload = await promiseCreator(param);\n      dispatch({\n        type: SUCCESS,\n        payload,\n      });\n    } catch (e) {\n      dispatch({\n        type: ERROR,\n        payload: e,\n        error: true,\n        //fsa -> flux standard action\n      });\n    }\n  };\n};\n\nconst defaultIdSelector = (param) => param;\nexport const createPromiseThunkById = (\n  type,\n  promiseCreator,\n  idSelector = defaultIdSelector\n) => {\n  const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\n\n  return (param) => async (dispatch) => {\n    const id = idSelector(param);\n    dispatch({ type, meta: id });\n    try {\n      const payload = await promiseCreator(param);\n      dispatch({\n        type: SUCCESS,\n        payload,\n        meta: id,\n      });\n    } catch (e) {\n      dispatch({\n        type: ERROR,\n        payload: e,\n        error: true,\n        meta: id,\n        //fsa -> flux standard action\n      });\n    }\n  };\n};\n\nexport const handleAsyncActions = (type, key, keepData) => {\n  const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\n  return (state, action) => {\n    switch (action.type) {\n      case type:\n        return {\n          ...state,\n          [key]: reducerUtils.loading(keepData ? state[key].data : null),\n        };\n      case SUCCESS:\n        return {\n          ...state,\n          [key]: reducerUtils.success(action.payload),\n        };\n      case ERROR:\n        return {\n          ...state,\n          [key]: reducerUtils.error(action.payload),\n        };\n      default:\n        return state;\n    }\n  };\n};\n\nexport const reducerUtils = {\n  initial: (data = null) => ({\n    data,\n    loading: false,\n    error: null,\n  }),\n  loading: (prevState = null) => ({\n    data: prevState,\n    loading: true,\n    error: null,\n  }),\n  success: (data) => ({\n    data,\n    loading: false,\n    error: null,\n  }),\n  error: (error) => ({\n    data: null,\n    loading: false,\n    error,\n  }),\n};\n"]},"metadata":{},"sourceType":"module"}