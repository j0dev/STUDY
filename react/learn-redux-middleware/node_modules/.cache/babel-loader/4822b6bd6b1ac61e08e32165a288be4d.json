{"ast":null,"code":"import * as postsAPI from \"../api/posts\";\nimport { reducerUtils, createPromiseThunk, handleAsyncActions } from \"../lib/asyncUtils\";\nconst GET_POSTS = \"posts/GET_POSTS\";\nconst GET_POSTS_SUCCESS = \"posts/GET_POSTS_SUCCESS\";\nconst GET_POSTS_ERROR = \"posts/GET_POSTS_ERROR\";\nconst GET_POST = \"posts/GET_POST\";\nconst GET_POST_SUCCESS = \"posts/GET_POST_SUCCESS\";\nconst GET_POST_ERROR = \"posts/GET_POST_ERROR\";\nconst CLEAR_POST = \"posts/CLEAR_POST\";\nexport const getPosts = createPromiseThunk(GET_POSTS, postsAPI.getPosts); // export const getPost = createPromiseThunk(GET_POST, postsAPI.getPostById);\n\nexport const getPost = id => async dispatch => {\n  dispatch({\n    type: GET_POST,\n    meta: id\n  });\n};\nexport const clearPost = () => ({\n  type: CLEAR_POST\n});\nconst initialState = {\n  posts: reducerUtils.initial(),\n  post: reducerUtils.initial()\n};\nconst getPostsReducer = handleAsyncActions(GET_POSTS, \"posts\", true);\nconst getPostReducer = handleAsyncActions(GET_POST, \"post\");\nexport default function posts(state = initialState, action) {\n  switch (action.type) {\n    case GET_POSTS:\n    case GET_POSTS_SUCCESS:\n    case GET_POSTS_ERROR:\n      return getPostsReducer(state, action);\n\n    case GET_POST:\n    case GET_POST_SUCCESS:\n    case GET_POST_ERROR:\n      return getPostReducer(state, action);\n\n    case CLEAR_POST:\n      return { ...state,\n        post: reducerUtils.initial()\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/j0dev/Desktop/j0dev/Study/react/learn-redux-middleware/src/modules/posts.js"],"names":["postsAPI","reducerUtils","createPromiseThunk","handleAsyncActions","GET_POSTS","GET_POSTS_SUCCESS","GET_POSTS_ERROR","GET_POST","GET_POST_SUCCESS","GET_POST_ERROR","CLEAR_POST","getPosts","getPost","id","dispatch","type","meta","clearPost","initialState","posts","initial","post","getPostsReducer","getPostReducer","state","action"],"mappings":"AAAA,OAAO,KAAKA,QAAZ,MAA0B,cAA1B;AACA,SACEC,YADF,EAEEC,kBAFF,EAGEC,kBAHF,QAIO,mBAJP;AAMA,MAAMC,SAAS,GAAG,iBAAlB;AACA,MAAMC,iBAAiB,GAAG,yBAA1B;AACA,MAAMC,eAAe,GAAG,uBAAxB;AAEA,MAAMC,QAAQ,GAAG,gBAAjB;AACA,MAAMC,gBAAgB,GAAG,wBAAzB;AACA,MAAMC,cAAc,GAAG,sBAAvB;AAEA,MAAMC,UAAU,GAAG,kBAAnB;AAEA,OAAO,MAAMC,QAAQ,GAAGT,kBAAkB,CAACE,SAAD,EAAYJ,QAAQ,CAACW,QAArB,CAAnC,C,CAEP;;AACA,OAAO,MAAMC,OAAO,GAAIC,EAAD,IAAQ,MAAOC,QAAP,IAAoB;AACjDA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAER,QAAR;AAAkBS,IAAAA,IAAI,EAAEH;AAAxB,GAAD,CAAR;AACD,CAFM;AAIP,OAAO,MAAMI,SAAS,GAAG,OAAO;AAAEF,EAAAA,IAAI,EAAEL;AAAR,CAAP,CAAlB;AAEP,MAAMQ,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAElB,YAAY,CAACmB,OAAb,EADY;AAEnBC,EAAAA,IAAI,EAAEpB,YAAY,CAACmB,OAAb;AAFa,CAArB;AAKA,MAAME,eAAe,GAAGnB,kBAAkB,CAACC,SAAD,EAAY,OAAZ,EAAqB,IAArB,CAA1C;AACA,MAAMmB,cAAc,GAAGpB,kBAAkB,CAACI,QAAD,EAAW,MAAX,CAAzC;AAEA,eAAe,SAASY,KAAT,CAAeK,KAAK,GAAGN,YAAvB,EAAqCO,MAArC,EAA6C;AAC1D,UAAQA,MAAM,CAACV,IAAf;AACE,SAAKX,SAAL;AACA,SAAKC,iBAAL;AACA,SAAKC,eAAL;AACE,aAAOgB,eAAe,CAACE,KAAD,EAAQC,MAAR,CAAtB;;AAEF,SAAKlB,QAAL;AACA,SAAKC,gBAAL;AACA,SAAKC,cAAL;AACE,aAAOc,cAAc,CAACC,KAAD,EAAQC,MAAR,CAArB;;AAEF,SAAKf,UAAL;AACE,aAAO,EACL,GAAGc,KADE;AAELH,QAAAA,IAAI,EAAEpB,YAAY,CAACmB,OAAb;AAFD,OAAP;;AAKF;AACE,aAAOI,KAAP;AAlBJ;AAoBD","sourcesContent":["import * as postsAPI from \"../api/posts\";\nimport {\n  reducerUtils,\n  createPromiseThunk,\n  handleAsyncActions,\n} from \"../lib/asyncUtils\";\n\nconst GET_POSTS = \"posts/GET_POSTS\";\nconst GET_POSTS_SUCCESS = \"posts/GET_POSTS_SUCCESS\";\nconst GET_POSTS_ERROR = \"posts/GET_POSTS_ERROR\";\n\nconst GET_POST = \"posts/GET_POST\";\nconst GET_POST_SUCCESS = \"posts/GET_POST_SUCCESS\";\nconst GET_POST_ERROR = \"posts/GET_POST_ERROR\";\n\nconst CLEAR_POST = \"posts/CLEAR_POST\";\n\nexport const getPosts = createPromiseThunk(GET_POSTS, postsAPI.getPosts);\n\n// export const getPost = createPromiseThunk(GET_POST, postsAPI.getPostById);\nexport const getPost = (id) => async (dispatch) => {\n  dispatch({ type: GET_POST, meta: id });\n};\n\nexport const clearPost = () => ({ type: CLEAR_POST });\n\nconst initialState = {\n  posts: reducerUtils.initial(),\n  post: reducerUtils.initial(),\n};\n\nconst getPostsReducer = handleAsyncActions(GET_POSTS, \"posts\", true);\nconst getPostReducer = handleAsyncActions(GET_POST, \"post\");\n\nexport default function posts(state = initialState, action) {\n  switch (action.type) {\n    case GET_POSTS:\n    case GET_POSTS_SUCCESS:\n    case GET_POSTS_ERROR:\n      return getPostsReducer(state, action);\n\n    case GET_POST:\n    case GET_POST_SUCCESS:\n    case GET_POST_ERROR:\n      return getPostReducer(state, action);\n\n    case CLEAR_POST:\n      return {\n        ...state,\n        post: reducerUtils.initial(),\n      };\n\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}