{"ast":null,"code":"export const createPromiseThunk = (type, promiseCreator) => {\n  const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\n  return param => async dispatch => {\n    dispatch({\n      type\n    });\n\n    try {\n      const payload = await promiseCreator(param);\n      dispatch({\n        type: SUCCESS,\n        payload\n      });\n    } catch (e) {\n      dispatch({\n        type: ERROR,\n        payload: e,\n        error: true //fsa -> flux standard action\n\n      });\n    }\n  };\n};\nexport const handleAsyncActions = (type, key) => {\n  const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\n  return (state, action) => {\n    switch (action.type) {\n      case type:\n        return { ...state,\n          [key]: reducerUtils.loading()\n        };\n\n      case SUCCESS:\n        return { ...state,\n          [key]: reducerUtils.success(action.payload)\n        };\n\n      case ERROR:\n        return { ...state,\n          [key]: reducerUtils.error(action.payload)\n        };\n\n      default:\n        return state;\n    }\n  };\n};\nexport const reducerUtils = {\n  initial: (data = null) => ({\n    data,\n    loading: false,\n    error: null\n  }),\n  loading: (prevState = null) => ({\n    data: prevState,\n    loading: true,\n    error: null\n  }),\n  success: data => ({\n    data,\n    loading: false,\n    error: null\n  }),\n  error: error => ({\n    data: null,\n    loading: false,\n    error\n  })\n};","map":{"version":3,"sources":["/Users/j0dev/Desktop/j0dev/Study/react/learn-redux-middleware/src/lib/asyncUtils.js"],"names":["createPromiseThunk","type","promiseCreator","SUCCESS","ERROR","param","dispatch","payload","e","error","handleAsyncActions","key","state","action","reducerUtils","loading","success","initial","data","prevState"],"mappings":"AAAA,OAAO,MAAMA,kBAAkB,GAAG,CAACC,IAAD,EAAOC,cAAP,KAA0B;AAC1D,QAAM,CAACC,OAAD,EAAUC,KAAV,IAAmB,CAAE,GAAEH,IAAK,UAAT,EAAqB,GAAEA,IAAK,QAA5B,CAAzB;AAEA,SAAQI,KAAD,IAAW,MAAOC,QAAP,IAAoB;AACpCA,IAAAA,QAAQ,CAAC;AAAEL,MAAAA;AAAF,KAAD,CAAR;;AACA,QAAI;AACF,YAAMM,OAAO,GAAG,MAAML,cAAc,CAACG,KAAD,CAApC;AACAC,MAAAA,QAAQ,CAAC;AACPL,QAAAA,IAAI,EAAEE,OADC;AAEPI,QAAAA;AAFO,OAAD,CAAR;AAID,KAND,CAME,OAAOC,CAAP,EAAU;AACVF,MAAAA,QAAQ,CAAC;AACPL,QAAAA,IAAI,EAAEG,KADC;AAEPG,QAAAA,OAAO,EAAEC,CAFF;AAGPC,QAAAA,KAAK,EAAE,IAHA,CAIP;;AAJO,OAAD,CAAR;AAMD;AACF,GAhBD;AAiBD,CApBM;AAsBP,OAAO,MAAMC,kBAAkB,GAAG,CAACT,IAAD,EAAOU,GAAP,KAAe;AAC/C,QAAM,CAACR,OAAD,EAAUC,KAAV,IAAmB,CAAE,GAAEH,IAAK,UAAT,EAAqB,GAAEA,IAAK,QAA5B,CAAzB;AACA,SAAO,CAACW,KAAD,EAAQC,MAAR,KAAmB;AACxB,YAAQA,MAAM,CAACZ,IAAf;AACE,WAAKA,IAAL;AACE,eAAO,EACL,GAAGW,KADE;AAEL,WAACD,GAAD,GAAOG,YAAY,CAACC,OAAb;AAFF,SAAP;;AAIF,WAAKZ,OAAL;AACE,eAAO,EACL,GAAGS,KADE;AAEL,WAACD,GAAD,GAAOG,YAAY,CAACE,OAAb,CAAqBH,MAAM,CAACN,OAA5B;AAFF,SAAP;;AAIF,WAAKH,KAAL;AACE,eAAO,EACL,GAAGQ,KADE;AAEL,WAACD,GAAD,GAAOG,YAAY,CAACL,KAAb,CAAmBI,MAAM,CAACN,OAA1B;AAFF,SAAP;;AAIF;AACE,eAAOK,KAAP;AAjBJ;AAmBD,GApBD;AAqBD,CAvBM;AAyBP,OAAO,MAAME,YAAY,GAAG;AAC1BG,EAAAA,OAAO,EAAE,CAACC,IAAI,GAAG,IAAR,MAAkB;AACzBA,IAAAA,IADyB;AAEzBH,IAAAA,OAAO,EAAE,KAFgB;AAGzBN,IAAAA,KAAK,EAAE;AAHkB,GAAlB,CADiB;AAM1BM,EAAAA,OAAO,EAAE,CAACI,SAAS,GAAG,IAAb,MAAuB;AAC9BD,IAAAA,IAAI,EAAEC,SADwB;AAE9BJ,IAAAA,OAAO,EAAE,IAFqB;AAG9BN,IAAAA,KAAK,EAAE;AAHuB,GAAvB,CANiB;AAW1BO,EAAAA,OAAO,EAAGE,IAAD,KAAW;AAClBA,IAAAA,IADkB;AAElBH,IAAAA,OAAO,EAAE,KAFS;AAGlBN,IAAAA,KAAK,EAAE;AAHW,GAAX,CAXiB;AAgB1BA,EAAAA,KAAK,EAAGA,KAAD,KAAY;AACjBS,IAAAA,IAAI,EAAE,IADW;AAEjBH,IAAAA,OAAO,EAAE,KAFQ;AAGjBN,IAAAA;AAHiB,GAAZ;AAhBmB,CAArB","sourcesContent":["export const createPromiseThunk = (type, promiseCreator) => {\n  const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\n\n  return (param) => async (dispatch) => {\n    dispatch({ type });\n    try {\n      const payload = await promiseCreator(param);\n      dispatch({\n        type: SUCCESS,\n        payload,\n      });\n    } catch (e) {\n      dispatch({\n        type: ERROR,\n        payload: e,\n        error: true,\n        //fsa -> flux standard action\n      });\n    }\n  };\n};\n\nexport const handleAsyncActions = (type, key) => {\n  const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\n  return (state, action) => {\n    switch (action.type) {\n      case type:\n        return {\n          ...state,\n          [key]: reducerUtils.loading(),\n        };\n      case SUCCESS:\n        return {\n          ...state,\n          [key]: reducerUtils.success(action.payload),\n        };\n      case ERROR:\n        return {\n          ...state,\n          [key]: reducerUtils.error(action.payload),\n        };\n      default:\n        return state;\n    }\n  };\n};\n\nexport const reducerUtils = {\n  initial: (data = null) => ({\n    data,\n    loading: false,\n    error: null,\n  }),\n  loading: (prevState = null) => ({\n    data: prevState,\n    loading: true,\n    error: null,\n  }),\n  success: (data) => ({\n    data,\n    loading: false,\n    error: null,\n  }),\n  error: (error) => ({\n    data: null,\n    loading: false,\n    error,\n  }),\n};\n"]},"metadata":{},"sourceType":"module"}