{"ast":null,"code":"import * as postsAPI from \"../api/posts\";\nimport { reducerUtils, createPromiseThunk, handleAsyncActions, createPromiseThunkById, handleAsyncActionsById } from \"../lib/asyncUtils\";\nconst GET_POSTS = \"posts/GET_POSTS\";\nconst GET_POSTS_SUCCESS = \"posts/GET_POSTS_SUCCESS\";\nconst GET_POSTS_ERROR = \"posts/GET_POSTS_ERROR\";\nconst GET_POST = \"posts/GET_POST\";\nconst GET_POST_SUCCESS = \"posts/GET_POST_SUCCESS\";\nconst GET_POST_ERROR = \"posts/GET_POST_ERROR\";\nconst CLEAR_POST = \"posts/CLEAR_POST\";\nexport const getPosts = createPromiseThunk(GET_POSTS, postsAPI.getPosts); // export const getPost = createPromiseThunk(GET_POST, postsAPI.getPostById);\n\nexport const getPost = createPromiseThunkById(GET_POST, postsAPI.getPostById);\nexport const goToHome = () => (dispatch, getState, {\n  history\n}) => {\n  history.push(\"/\");\n};\nexport const clearPost = () => ({\n  type: CLEAR_POST\n});\nconst initialState = {\n  posts: reducerUtils.initial(),\n  post: {}\n};\nconst getPostsReducer = handleAsyncActions(GET_POSTS, \"posts\", true); // const getPostReducer = handleAsyncActions(GET_POST, \"post\");\n\nconst getPostReducer = handleAsyncActionsById(GET_POST, \"post\", true);\nexport default function posts(state = initialState, action) {\n  switch (action.type) {\n    case GET_POSTS:\n    case GET_POSTS_SUCCESS:\n    case GET_POSTS_ERROR:\n      return getPostsReducer(state, action);\n\n    case GET_POST:\n    case GET_POST_SUCCESS:\n    case GET_POST_ERROR:\n      return getPostReducer(state, action);\n\n    case CLEAR_POST:\n      return { ...state,\n        post: reducerUtils.initial()\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/j0dev/Desktop/j0dev/Study/react/learn-redux-middleware/src/modules/posts.js"],"names":["postsAPI","reducerUtils","createPromiseThunk","handleAsyncActions","createPromiseThunkById","handleAsyncActionsById","GET_POSTS","GET_POSTS_SUCCESS","GET_POSTS_ERROR","GET_POST","GET_POST_SUCCESS","GET_POST_ERROR","CLEAR_POST","getPosts","getPost","getPostById","goToHome","dispatch","getState","history","push","clearPost","type","initialState","posts","initial","post","getPostsReducer","getPostReducer","state","action"],"mappings":"AAAA,OAAO,KAAKA,QAAZ,MAA0B,cAA1B;AACA,SACEC,YADF,EAEEC,kBAFF,EAGEC,kBAHF,EAIEC,sBAJF,EAKEC,sBALF,QAMO,mBANP;AAQA,MAAMC,SAAS,GAAG,iBAAlB;AACA,MAAMC,iBAAiB,GAAG,yBAA1B;AACA,MAAMC,eAAe,GAAG,uBAAxB;AAEA,MAAMC,QAAQ,GAAG,gBAAjB;AACA,MAAMC,gBAAgB,GAAG,wBAAzB;AACA,MAAMC,cAAc,GAAG,sBAAvB;AAEA,MAAMC,UAAU,GAAG,kBAAnB;AAEA,OAAO,MAAMC,QAAQ,GAAGX,kBAAkB,CAACI,SAAD,EAAYN,QAAQ,CAACa,QAArB,CAAnC,C,CAEP;;AACA,OAAO,MAAMC,OAAO,GAAGV,sBAAsB,CAACK,QAAD,EAAWT,QAAQ,CAACe,WAApB,CAAtC;AAEP,OAAO,MAAMC,QAAQ,GAAG,MAAM,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAAEC,EAAAA;AAAF,CAArB,KAAqC;AACjEA,EAAAA,OAAO,CAACC,IAAR,CAAa,GAAb;AACD,CAFM;AAIP,OAAO,MAAMC,SAAS,GAAG,OAAO;AAAEC,EAAAA,IAAI,EAAEV;AAAR,CAAP,CAAlB;AAEP,MAAMW,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAEvB,YAAY,CAACwB,OAAb,EADY;AAEnBC,EAAAA,IAAI,EAAE;AAFa,CAArB;AAKA,MAAMC,eAAe,GAAGxB,kBAAkB,CAACG,SAAD,EAAY,OAAZ,EAAqB,IAArB,CAA1C,C,CACA;;AACA,MAAMsB,cAAc,GAAGvB,sBAAsB,CAACI,QAAD,EAAW,MAAX,EAAmB,IAAnB,CAA7C;AAEA,eAAe,SAASe,KAAT,CAAeK,KAAK,GAAGN,YAAvB,EAAqCO,MAArC,EAA6C;AAC1D,UAAQA,MAAM,CAACR,IAAf;AACE,SAAKhB,SAAL;AACA,SAAKC,iBAAL;AACA,SAAKC,eAAL;AACE,aAAOmB,eAAe,CAACE,KAAD,EAAQC,MAAR,CAAtB;;AAEF,SAAKrB,QAAL;AACA,SAAKC,gBAAL;AACA,SAAKC,cAAL;AACE,aAAOiB,cAAc,CAACC,KAAD,EAAQC,MAAR,CAArB;;AAEF,SAAKlB,UAAL;AACE,aAAO,EACL,GAAGiB,KADE;AAELH,QAAAA,IAAI,EAAEzB,YAAY,CAACwB,OAAb;AAFD,OAAP;;AAKF;AACE,aAAOI,KAAP;AAlBJ;AAoBD","sourcesContent":["import * as postsAPI from \"../api/posts\";\nimport {\n  reducerUtils,\n  createPromiseThunk,\n  handleAsyncActions,\n  createPromiseThunkById,\n  handleAsyncActionsById,\n} from \"../lib/asyncUtils\";\n\nconst GET_POSTS = \"posts/GET_POSTS\";\nconst GET_POSTS_SUCCESS = \"posts/GET_POSTS_SUCCESS\";\nconst GET_POSTS_ERROR = \"posts/GET_POSTS_ERROR\";\n\nconst GET_POST = \"posts/GET_POST\";\nconst GET_POST_SUCCESS = \"posts/GET_POST_SUCCESS\";\nconst GET_POST_ERROR = \"posts/GET_POST_ERROR\";\n\nconst CLEAR_POST = \"posts/CLEAR_POST\";\n\nexport const getPosts = createPromiseThunk(GET_POSTS, postsAPI.getPosts);\n\n// export const getPost = createPromiseThunk(GET_POST, postsAPI.getPostById);\nexport const getPost = createPromiseThunkById(GET_POST, postsAPI.getPostById);\n\nexport const goToHome = () => (dispatch, getState, { history }) => {\n  history.push(\"/\");\n};\n\nexport const clearPost = () => ({ type: CLEAR_POST });\n\nconst initialState = {\n  posts: reducerUtils.initial(),\n  post: {},\n};\n\nconst getPostsReducer = handleAsyncActions(GET_POSTS, \"posts\", true);\n// const getPostReducer = handleAsyncActions(GET_POST, \"post\");\nconst getPostReducer = handleAsyncActionsById(GET_POST, \"post\", true);\n\nexport default function posts(state = initialState, action) {\n  switch (action.type) {\n    case GET_POSTS:\n    case GET_POSTS_SUCCESS:\n    case GET_POSTS_ERROR:\n      return getPostsReducer(state, action);\n\n    case GET_POST:\n    case GET_POST_SUCCESS:\n    case GET_POST_ERROR:\n      return getPostReducer(state, action);\n\n    case CLEAR_POST:\n      return {\n        ...state,\n        post: reducerUtils.initial(),\n      };\n\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}