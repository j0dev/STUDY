{"ast":null,"code":"var _jsxFileName = \"/Users/j0dev/Desktop/j0dev/Study/react/api-integrate/src/Users.js\";\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { useAsync } from \"react-async\";\nimport User from \"./User\";\n\nasync function getUsers() {\n  const res = await axios.get(\"https://jsonplaceholder.typicode.com/users\");\n  return res.data;\n}\n\nfunction Users() {\n  const {\n    data: users,\n    error,\n    isLoading,\n    reload\n  } = useAsync({\n    promiseFn: getUsers\n  });\n  if (isLoading) return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 25\n    }\n  }, \"loading...\");\n  if (error) return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 21\n    }\n  }, \"Error occured\");\n  if (!users) return /*#__PURE__*/React.createElement(\"button\", {\n    onClick: reload,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 22\n    }\n  }, \"Re-Loading\");\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }, users.map(user => /*#__PURE__*/React.createElement(\"li\", {\n    key: user.id,\n    onClick: () => setUserId(user.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 11\n    }\n  }, user.name, \" (\", user.username, \")\"))), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: refetch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }, \"Re-Loading\"), userId && /*#__PURE__*/React.createElement(User, {\n    id: userId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 18\n    }\n  }));\n}\n\nexport default Users;","map":{"version":3,"sources":["/Users/j0dev/Desktop/j0dev/Study/react/api-integrate/src/Users.js"],"names":["React","useState","axios","useAsync","User","getUsers","res","get","data","Users","users","error","isLoading","reload","promiseFn","map","user","id","setUserId","name","username","refetch","userId"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,eAAeC,QAAf,GAA0B;AACxB,QAAMC,GAAG,GAAG,MAAMJ,KAAK,CAACK,GAAN,CAAU,4CAAV,CAAlB;AACA,SAAOD,GAAG,CAACE,IAAX;AACD;;AAED,SAASC,KAAT,GAAiB;AACf,QAAM;AAAED,IAAAA,IAAI,EAAEE,KAAR;AAAeC,IAAAA,KAAf;AAAsBC,IAAAA,SAAtB;AAAiCC,IAAAA;AAAjC,MAA4CV,QAAQ,CAAC;AACzDW,IAAAA,SAAS,EAAET;AAD8C,GAAD,CAA1D;AAIA,MAAIO,SAAJ,EAAe,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACf,MAAID,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAP;AACX,MAAI,CAACD,KAAL,EAAY,oBAAO;AAAQ,IAAA,OAAO,EAAEG,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AAEZ,sBACE,uDACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,KAAK,CAACK,GAAN,CAAUC,IAAI,iBACb;AAAI,IAAA,GAAG,EAAEA,IAAI,CAACC,EAAd;AAAkB,IAAA,OAAO,EAAE,MAAMC,SAAS,CAACF,IAAI,CAACC,EAAN,CAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,IAAI,CAACG,IADR,QACgBH,IAAI,CAACI,QADrB,MADD,CADH,CADF,eAQE;AAAQ,IAAA,OAAO,EAAEC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBARF,EASGC,MAAM,iBAAI,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAEA,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATb,CADF;AAaD;;AAED,eAAeb,KAAf","sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { useAsync } from \"react-async\";\nimport User from \"./User\";\n\nasync function getUsers() {\n  const res = await axios.get(\"https://jsonplaceholder.typicode.com/users\");\n  return res.data;\n}\n\nfunction Users() {\n  const { data: users, error, isLoading, reload } = useAsync({\n    promiseFn: getUsers\n  });\n\n  if (isLoading) return <div>loading...</div>;\n  if (error) return <div>Error occured</div>;\n  if (!users) return <button onClick={reload}>Re-Loading</button>;\n\n  return (\n    <>\n      <ul>\n        {users.map(user => (\n          <li key={user.id} onClick={() => setUserId(user.id)}>\n            {user.name} ({user.username})\n          </li>\n        ))}\n      </ul>\n      <button onClick={refetch}>Re-Loading</button>\n      {userId && <User id={userId} />}\n    </>\n  );\n}\n\nexport default Users;\n"]},"metadata":{},"sourceType":"module"}